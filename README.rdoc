== Rails Girls Kuching Workshop : Part 3 (Create Static Pages with Rails)

Ruby on Rails is a web framework that makes it easy to build powerful web apps in a short amount of time.

Ruby on Rails is written in Ruby programming language.

For this workshop, we will be focusing on basic <b>Routes, Views and Controllers</b>


== Nitrous.IO Quick Setup

<b>Download Nitrous Pro for Chrome</b>

{Nitrous.io}[https://www.nitrous.io] is a cloud development box and text editor where you can write and run your code.

Click {HERE}[https://chrome.google.com/webstore/detail/nitrous/efdcneeepllhjlbejkfnaolelbpdacai] to download the app.

<b>Signing up</b>

1. Launch the app from your Chrome browser.
2. Follow the step to signup as a new user.
3. Wait for their confirmation email.

<b>Create your first box</b>
    //Instructions will be placed here later

<b>Connect to GitHub</b>

Follow the steps {HERE}[https://community.nitrous.io/docs/connect-to-github] to connect with GitHub.

<b>Check Version</b>

1. Ruby Version - run:<tt>ruby -v</tt>
2. Rails Version - run:<tt>rails -v</tt>


== Hello Rails

* Let's get started by making a Rails app for a personal website. In the terminal, type <tt>$ rails new MySite</tt>

  The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use       to build the app.

  Go to your file browser to see the files and folder.

  The <tt>rails new <project_name></tt> is the starting point for every rails project.

* Run <tt>$ bundle install</tt>

  The <tt>bundle install</tt> command installed all the software packages needed by the new Rails app. These software pack       ages are called gems and they are listed in the file <b>Gemfile</b>.

* Finally type <tt>rails s -b 0.0.0.0</tt>

  The <tt>rails server</tt> command starts the Rails development server so that we could preview the app in the browser. Click on <tt>Preview -> Port 3000</tt>. This development server is called WEBrick.

== What happens when you visit your localhost?
1. The browser makes a request for the URL <b>http://localhost:3000</b>
2. The request hits the Rails router in <tt>config/routes.rb</tt>. The router recognizes the URL and sends the request to the <em>controller</em>.
3. The controller receives the request and processes it.
4. The controller passes the request to the view.
5. The view renders the page as HTML.
6. The controller sends the HTML back to the browser for you to see.
7. This is called the <b>request/response cycle</b>. It's a useful way to see how a Rails app's files and folders fit together.

== Controllers
* We need 3 parts to build the app : a controller, a route and a view. In the terminal type, <tt>rails generate Pages</tt>

* After <tt>rails generate</tt> finishes running, open <tt>app/controllers/pages_controller.rb</tt>. Within the <tt>class PagesController</tt>, add a method <tt>home</tt>:

       # pages_controller.rb
       class PagesController < ApplicationController 

          def home
          end
       end




== Source
* {Codecademy : Learn to Code}[https://www.codecademy.com/]


