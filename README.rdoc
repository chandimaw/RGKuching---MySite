== Rails Girls Kuching Workshop : Part 3 (Create Static Pages with Rails)

Ruby on Rails is a web framework that makes it easy to build powerful web apps in a short amount of time.

Ruby on Rails is written in Ruby programming language.

For this workshop, we will be focusing on basic <b>Routes, Views and Controllers</b>


== Nitrous.IO Quick Setup

<b>Download Nitrous Pro for Chrome</b>

{Nitrous.io}[https://www.nitrous.io] is a cloud development box and text editor where you can write and run your code.

Click {HERE}[https://chrome.google.com/webstore/detail/nitrous/efdcneeepllhjlbejkfnaolelbpdacai] to download the app.

<b>Signing up</b>

1. Launch the app from your Chrome browser.
2. Follow the step to signup as a new user.
3. Wait for their confirmation email.

<b>Create your first box</b>
    //Instructions will be placed here later

<b>Connect to GitHub</b>

Follow the steps {HERE}[https://community.nitrous.io/docs/connect-to-github] to connect with GitHub.

<b>Check Version</b>

1. Ruby Version - run:<tt>ruby -v</tt>
2. Rails Version - run:<tt>rails -v</tt>


== Hello Rails

* Let's get started by making a Rails app for a personal website. In the terminal, type <tt>$ rails new MySite</tt>

  The rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use       to build the app.

  Go to your file browser to see the files and folder.

  The <tt>rails new <project_name></tt> is the starting point for every rails project.

* Run <tt>$ bundle install</tt>

  The <tt>bundle install</tt> command installed all the software packages needed by the new Rails app. These software pack       ages are called gems and they are listed in the file <b>Gemfile</b>.

* Finally type <tt>rails s -b 0.0.0.0</tt>

  The <tt>rails server</tt> command starts the Rails development server so that we could preview the app in the browser. Click on <tt>Preview -> Port 3000</tt>. This development server is called WEBrick.


== What happens when you visit your localhost?

1. The browser makes a request for the URL <b>http://localhost:3000</b>
2. The request hits the Rails router in <tt>config/routes.rb</tt>. The router recognizes the URL and sends the request to the <em>controller</em>.
3. The controller receives the request and processes it.
4. The controller passes the request to the view.
5. The view renders the page as HTML.
6. The controller sends the HTML back to the browser for you to see.
7. This is called the <b>request/response cycle</b>. It's a useful way to see how a Rails app's files and folders fit together.


== Controllers

* We need 3 parts to build the app : a controller, a route and a view. In the terminal type, <tt>$ rails generate Pages</tt>

* After <tt>rails generate</tt> finishes running, open <tt>app/controllers/pages_controller.rb</tt>. Within the <tt>class PagesController</tt>, add a method <tt>home</tt>:

       # pages_controller.rb
       class PagesController < ApplicationController
          def home
          end
       end

The <tt>rails generate controller Pages</tt> command generated a new controller named <em>Pages</em>. This created a file named <b>app/controllers/pages_controller.rb</b>.

* Inside the new Pages controller, we added a method called <b>home</b>. Methods in Rails controllers are also referred to as controller actions, so here we added the <b>home</b> action to the Pages controller.


== Routes
* Now that we have a controller, let's move on to the second part of the request/response cycle and create a route.
  Open <b>config/routes.rb</b> and underneath line 1, type:
  
     #config/routes.rb
      root 'pages#home'
      
The root route only routes GET requests to the action and sets the default address to yoursite which is <tt>pages#home</tt>
Now open <b>http://localhost:3000</b>.

== Views
* Now that we have a controller and a route, let's move on to the third part of the request/response cycle and create a view.
Open <b>app/views/pages/home.html.erb</b>, and type in the following HTML. Fill in your own name.

    #app/views/pages/home.html.erb
    <div class="main">
      <div class="container">
        <h1>Hello my name is __</h1>
        <p>I make Rails apps.</p>
      </div>
    </div>
    
* Go to your folder <b>app/assets/stylesheets/</b> and create a new stylesheet by typing <tt>$ touch pages.scss</tt>.
  Next, open your <b>pages.scss</b> file and add the code below,
  
    #app/views/assets/stylesheets/pages.scss</tt>
    
    /* General */
    html, body {
      height: 100%;
      margin: 0;
    }

    body {
      background-image: url('--');
      background-repeat: no-repeat;
      background-size: cover;
      font-family: 'Source Sans Pro', sans-serif;
    }

    .container {
      margin: 0 auto;
      width: 960px;
     }  

    /* Main */
    .main {
      color: #fff;
      position: relative;
      top: 100px;
      text-align: center;
     }

    .main h1 {
      font-size: 80px;
      font-weight: 300;
    }

    .main p {
      font-size: 30px;
    }

    @media screen and (max-width: 800px) {
      body {
          background-size: auto 100%;
      }
      .container {
          width: 100%;
      }
    }
    
      
      



== Source
* {Codecademy : Learn to Code}[https://www.codecademy.com/]


